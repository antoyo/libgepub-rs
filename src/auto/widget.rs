// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gepub_sys;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Doc;

glib_wrapper! {
    pub struct Widget(Object<gepub_sys::GepubWidget, gepub_sys::GepubWidgetClass, WidgetClass>) @extends gtk::Widget;

    match fn {
        get_type => || gepub_sys::gepub_widget_get_type(),
    }
}

impl Widget {
    pub fn new() -> Widget {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_full(gepub_sys::gepub_widget_new()).unsafe_cast()
        }
    }

    pub fn chapter_next(&self) -> bool {
        unsafe {
            from_glib(gepub_sys::gepub_widget_chapter_next(self.to_glib_none().0))
        }
    }

    pub fn chapter_prev(&self) -> bool {
        unsafe {
            from_glib(gepub_sys::gepub_widget_chapter_prev(self.to_glib_none().0))
        }
    }

    pub fn get_chapter(&self) -> i32 {
        unsafe {
            gepub_sys::gepub_widget_get_chapter(self.to_glib_none().0)
        }
    }

    pub fn get_chapter_length(&self) -> i32 {
        unsafe {
            gepub_sys::gepub_widget_get_chapter_length(self.to_glib_none().0)
        }
    }

    pub fn get_doc(&self) -> Option<Doc> {
        unsafe {
            from_glib_none(gepub_sys::gepub_widget_get_doc(self.to_glib_none().0))
        }
    }

    pub fn get_fontfamily(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gepub_sys::gepub_widget_get_fontfamily(self.to_glib_none().0))
        }
    }

    pub fn get_fontsize(&self) -> i32 {
        unsafe {
            gepub_sys::gepub_widget_get_fontsize(self.to_glib_none().0)
        }
    }

    pub fn get_lineheight(&self) -> f32 {
        unsafe {
            gepub_sys::gepub_widget_get_lineheight(self.to_glib_none().0)
        }
    }

    pub fn get_margin(&self) -> i32 {
        unsafe {
            gepub_sys::gepub_widget_get_margin(self.to_glib_none().0)
        }
    }

    pub fn get_n_chapters(&self) -> i32 {
        unsafe {
            gepub_sys::gepub_widget_get_n_chapters(self.to_glib_none().0)
        }
    }

    pub fn get_paginate(&self) -> bool {
        unsafe {
            from_glib(gepub_sys::gepub_widget_get_paginate(self.to_glib_none().0))
        }
    }

    pub fn get_pos(&self) -> f32 {
        unsafe {
            gepub_sys::gepub_widget_get_pos(self.to_glib_none().0)
        }
    }

    pub fn page_next(&self) -> bool {
        unsafe {
            from_glib(gepub_sys::gepub_widget_page_next(self.to_glib_none().0))
        }
    }

    pub fn page_prev(&self) -> bool {
        unsafe {
            from_glib(gepub_sys::gepub_widget_page_prev(self.to_glib_none().0))
        }
    }

    pub fn set_chapter(&self, index: i32) {
        unsafe {
            gepub_sys::gepub_widget_set_chapter(self.to_glib_none().0, index);
        }
    }

    pub fn set_doc(&self, doc: Option<&Doc>) {
        unsafe {
            gepub_sys::gepub_widget_set_doc(self.to_glib_none().0, doc.to_glib_none().0);
        }
    }

    pub fn set_fontfamily(&self, family: &str) {
        unsafe {
            gepub_sys::gepub_widget_set_fontfamily(self.to_glib_none().0, family.to_glib_none().0);
        }
    }

    pub fn set_fontsize(&self, size: i32) {
        unsafe {
            gepub_sys::gepub_widget_set_fontsize(self.to_glib_none().0, size);
        }
    }

    pub fn set_lineheight(&self, size: f32) {
        unsafe {
            gepub_sys::gepub_widget_set_lineheight(self.to_glib_none().0, size);
        }
    }

    pub fn set_margin(&self, margin: i32) {
        unsafe {
            gepub_sys::gepub_widget_set_margin(self.to_glib_none().0, margin);
        }
    }

    pub fn set_paginate(&self, p: bool) {
        unsafe {
            gepub_sys::gepub_widget_set_paginate(self.to_glib_none().0, p.to_glib());
        }
    }

    pub fn set_pos(&self, index: f32) {
        unsafe {
            gepub_sys::gepub_widget_set_pos(self.to_glib_none().0, index);
        }
    }

    pub fn get_property_chapter_pos(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.as_ptr() as *mut gobject_sys::GObject, b"chapter-pos\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `chapter-pos` getter").unwrap()
        }
    }

    pub fn set_property_chapter_pos(&self, chapter_pos: f32) {
        unsafe {
            gobject_sys::g_object_set_property(self.as_ptr() as *mut gobject_sys::GObject, b"chapter-pos\0".as_ptr() as *const _, Value::from(&chapter_pos).to_glib_none().0);
        }
    }

    pub fn get_property_nchapters(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.as_ptr() as *mut gobject_sys::GObject, b"nchapters\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `nchapters` getter").unwrap()
        }
    }

    pub fn connect_property_chapter_notify<F: Fn(&Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chapter_trampoline<F: Fn(&Widget) + 'static>(this: *mut gepub_sys::GepubWidget, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::chapter\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_chapter_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_chapter_pos_notify<F: Fn(&Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chapter_pos_trampoline<F: Fn(&Widget) + 'static>(this: *mut gepub_sys::GepubWidget, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::chapter-pos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_chapter_pos_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_doc_notify<F: Fn(&Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_doc_trampoline<F: Fn(&Widget) + 'static>(this: *mut gepub_sys::GepubWidget, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::doc\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_doc_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_nchapters_notify<F: Fn(&Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_nchapters_trampoline<F: Fn(&Widget) + 'static>(this: *mut gepub_sys::GepubWidget, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::nchapters\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_nchapters_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_paginate_notify<F: Fn(&Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_paginate_trampoline<F: Fn(&Widget) + 'static>(this: *mut gepub_sys::GepubWidget, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::paginate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_paginate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for Widget {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Widget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Widget")
    }
}
