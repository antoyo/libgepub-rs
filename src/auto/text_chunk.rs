// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gepub_sys;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use std::fmt;

glib_wrapper! {
    pub struct TextChunk(Object<gepub_sys::GepubTextChunk, gepub_sys::GepubTextChunkClass, TextChunkClass>);

    match fn {
        get_type => || gepub_sys::gepub_text_chunk_get_type(),
    }
}

impl TextChunk {
    //pub fn new(type_: /*Ignored*/TextChunkType, text: &str) -> TextChunk {
    //    unsafe { TODO: call gepub_sys:gepub_text_chunk_new() }
    //}
}

pub const NONE_TEXT_CHUNK: Option<&TextChunk> = None;

pub trait TextChunkExt: 'static {
    fn text(&self) -> Option<GString>;

    //fn type_(&self) -> /*Ignored*/TextChunkType;

    fn type_str(&self) -> Option<GString>;
}

impl<O: IsA<TextChunk>> TextChunkExt for O {
    fn text(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gepub_sys::gepub_text_chunk_text(self.as_ref().to_glib_none().0))
        }
    }

    //fn type_(&self) -> /*Ignored*/TextChunkType {
    //    unsafe { TODO: call gepub_sys:gepub_text_chunk_type() }
    //}

    fn type_str(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gepub_sys::gepub_text_chunk_type_str(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for TextChunk {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextChunk")
    }
}
