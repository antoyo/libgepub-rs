// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gepub_sys;
use glib;
use glib::translate::*;
use glib::GString;
use std::fmt;

glib_wrapper! {
    pub struct Archive(Object<gepub_sys::GepubArchive, gepub_sys::GepubArchiveClass, ArchiveClass>);

    match fn {
        get_type => || gepub_sys::gepub_archive_get_type(),
    }
}

impl Archive {
    pub fn new(path: &str) -> Archive {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(gepub_sys::gepub_archive_new(path.to_glib_none().0))
        }
    }

    pub fn get_root_file(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gepub_sys::gepub_archive_get_root_file(self.to_glib_none().0))
        }
    }

    pub fn list_files(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(gepub_sys::gepub_archive_list_files(self.to_glib_none().0))
        }
    }

    pub fn read_entry(&self, path: &str) -> Option<glib::Bytes> {
        unsafe {
            from_glib_full(gepub_sys::gepub_archive_read_entry(self.to_glib_none().0, path.to_glib_none().0))
        }
    }
}

impl fmt::Display for Archive {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Archive")
    }
}
